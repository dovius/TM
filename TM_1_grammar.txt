#simple C

int main(int a) {
	read a;
	if (a == 5) {
		a = a + 1
	}	
	string first = 'labas'
	int b;
	b = 10 - a * 5;
	write b;
}

<program> ::= <function-declaration> <program>
            | <function-declaration>

<function-declaration> ::= <type-specifier> <identifier> "(" <parameter-list> ")" <block-statement>

<type-specifier> ::= 'char'
                   | 'int'
		   | 'string'

<parameter-list> ::= <parameter-declaration>
		   | <arrayDeclaration>
		   | <arrayDeclaration> "," <parameter_list>
		   | <parameter-list> "," <parameter-declaration>

<parameter-declaration> ::= <type-specifier> <identifier>

<arrayDeclaration> ::= <type> <identifier> "[" <integer> "]" ";"
<arrayIndexStatement> ::= <identifier> "["<expression>"]"


****************STATEMENTS****************
<statements> ::= <statement> <statements>
              | <statement>

<statement> ::= <expression-statement>
              | <selection-statement>
              | <simple-statement>
	          | <return-statement>
	          | <loop-statement>

<simple-statement> ::= <varDeclaration>
		      | <assignmentStmt>
              | <ioStmt>


<loop-statement> ::= <while-loop> | <for-loop>

<while-loop> ::= "while" "(" <expresion> ")" <block-statement>

<for-loop> ::= "for" "(" <varDeclaration> ";" <expression> ";" <post-pre-fix>  ")" <block-statement>

<post-pre-fix> ::= <identifier> <incrementDecrementOp>
		| <incrementDecrementOp> <identifier>

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<varDeclaration> ::= <type-specifier> <identifier>
                  | <type-specifier> <identifier> <assigmentOp> <expression>

<assignmentStmt> ::= <identifier> <assigmentOp> <expression-statement>
                   | <arrayIndexStatement> <assigmentOp> <expression> ";"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

<ioStmt> ::= <inputStmt>
           | <outputStmt>

<inputStmt>  ::= 'read' <identifier> ";"

<outputStmt> ::= 'out' <expression> ";"

<selection-statement> ::= if ( <expression> ) <block-statement>
			| if ( <expression> ) <block-statement>else <block-statement>

****************STATEMENTS****************




****************EXPRESSIONS****************
<expression-statement> ::= <expression> ";"
<expresion> ::= <expr-1> <logicOp> <expresion>  | <expr-1>
<expr-1> ::= <expr-2> <compareOp> <expr-1> | <expr-2>
<expr-2> ::= <expr-3> <addSubOp> <expr-2>  | <expr-3>
<expr-3> ::= <expr-4> <multDivOp> <expr-3>  | <expr-4>
<expr-4> ::= <identifier>
           | <pre-post-fix>
           | <int>
           | "(" <expresion> ")"
           | <arrayIndexStatement>
           | <function-call>
	   | <string>

<adSubOp> = "+" | "-"

<multDivOp> = "*" | "/"


****************EXPRESSIONS****************
<block-statement> ::= "{" <statements> "}"
                    | "{" "}"

<function-call> ::= <identifier> "(" <call-param-list> ")"
	            | <identifier> "(" ")"

<call-param-list-item>    ::= <expresion>
                            | <expresion> , <call-param-list>

<identifier> ::= [a-zA-Z_][a-zA-Z0-9_]*

<char> ::= [a-zA-Z]

<digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

<int> ::= <digit>
 	| <digit> <int>

<string>  ::= "'" <stringChars> "'"
            | "'" "'"
<stringChars> ::= <char> <stringChars>
		| <char>

<assigmentOp> ::= "="
<incrementDecrementOp> ::= "++" | "--"
<logicOp> ::= "&" | "|"
<compareOp> ::= "==" | "!=" | ">" | "<" | ">=" | "<="

<return-statement> ::= 'return' |
		       'return' <expresion> ";"